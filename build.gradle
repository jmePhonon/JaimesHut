import org.gradle.plugins.ide.eclipse.model.AccessRule

plugins {
    id "io.github.0ffz.github-packages" version "1.2.1"
}
apply plugin : 'java' 
apply plugin: 'eclipse'
apply plugin: 'maven'


group = "com.jme3.phonon"
version= project.hasProperty('in_version') ? project.getProperty('in_version') : '-SNAPSHOT'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

def jmerepo="org.jmonkeyengine"
def jmeversion="3.3.2-stable"

def v_phonon="0.3.7"



eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('accessible', 'com/**'))
                jre.accessRules.add(new AccessRule('accessible', '**'))
                jre.accessRules.add(new AccessRule('accessible', 'sun/**'))           
             }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven githubPackage.invoke("riccardobl")

}


def jmephonondep;
if(gradle.ext.useDevDependency){
    printf("Use dev dependency");
    jmephonondep= project(':jme_phonon');
}else{
    jmephonondep="com.jme3.phonon:jme_phonon:"+v_phonon;
}

dependencies {
    compile jmephonondep
    compile jmerepo + ':jme3-core:' + jmeversion
    compile jmerepo + ':jme3-bullet:' + jmeversion
    compile jmerepo + ':jme3-bullet-native:' + jmeversion
    compile jmerepo + ':jme3-desktop:' + jmeversion
    compile jmerepo + ':jme3-lwjgl:' + jmeversion
    compile 'wf.frk:jme3-bullet-vhacd:1.0.5'
    compile "wf.frk:jme_f3b:0.92"
    testCompile 'junit:junit:4.11' 
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile(
        [group: 'org.nanohttpd', name: 'nanohttpd', version: '2.3.1'],
    )
}


task downloadResources(type: Exec){
    commandLine 'bash','prepare.sh'
} 

task buildFatJar(type: Jar) {

    from sourceSets.test.output
    manifest {
        attributes 'Main-Class': 'JaimesHut'
    }
    from {
        configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    baseName = project.name + '-fat'
      with jar 
}